<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决IDEA开发时出现内存不足问题</title>
      <link href="/2025/08/17/%E8%A7%A3%E5%86%B3IDEA%E5%BC%80%E5%8F%91%E6%97%B6%E5%87%BA%E7%8E%B0%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2025/08/17/%E8%A7%A3%E5%86%B3IDEA%E5%BC%80%E5%8F%91%E6%97%B6%E5%87%BA%E7%8E%B0%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="解决IDEA开发时出现内存不足问题"><a href="#解决IDEA开发时出现内存不足问题" class="headerlink" title="解决IDEA开发时出现内存不足问题"></a>解决IDEA开发时出现内存不足问题</h1><blockquote><p>在工作的开发过程中,IDEA提示:IDE 内存不足，这可能会影响性能。请考虑增加堆大小。</p></blockquote><p>该问题通常由多种因素共同作用导致,以下是一些常见原因:</p><ol><li><p>默认堆内存设置过小</p><p>​    大多数的IDE都会预设一个默认的堆内存上限,如果项目规模过大（代码量过多、依赖库过多），默认设置无法满足需求，导致内存占用会超过上限。</p></li><li><p>项目规模过大</p><p>​    项目包含数万甚至数十万行代码，IDE需要加载和解析大量文件，消耗大量内存</p><p>​    项目的依赖库过多或体积过大，IDE索引这些依赖时会占用大量内存。</p></li><li><p>同时打开多个项目或者文件</p><p>​    同时在IDE中打开多个大型项目或在单个项目中打开数百个文件，会导致IDE为每个文件维持语法分析、缓存等数据，累积占用大量内存。</p></li><li><p>插件或扩展过多</p><p>​    安装的插件会在后台运行并占用内存,部分插件优化不佳时,也会导致过度消耗内存资源</p></li><li><p>长时间运行</p><p>​    长时间运行后内存占用会逐渐累积，最终超过堆内存上限</p></li><li><p>某些语言或框架的特性</p><p>​    Java语言的IDE需要加载虚拟机环境和大量类型信息</p><p>​    Spring框架复杂配置解析也会增加内存消耗</p></li></ol><p>解决方法：</p><ol><li><p>调整IDE堆内存大小</p><ol><li><p>通过IDE内置设置调整</p><p>点击Help（帮助）–&gt;Edit Custom VM Options（编辑自定义虚拟机选项）</p></li></ol></li></ol><p><img src="/2025/05/30/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/image-20250817155236165.png" alt="alt text"></p><pre><code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始堆内存大小(JVM启动时分配的内存)，建议设为物理内存的1/8</span></span><br><span class="line">-Xms128m</span><br><span class="line"><span class="comment">// 最大堆内存上线(JVM运行中能使用的最大内存)，建议设为物理内存的1/4</span></span><br><span class="line">-Xmx1024m</span><br><span class="line"><span class="comment">// 预留代码缓存大小，代码缓存不足时会导致JIT编译效率下降</span></span><br><span class="line">-XX:ReservedCodeCacheSize=512m</span><br><span class="line"><span class="comment">// 避免因JDK版本差异导致的启动失败</span></span><br><span class="line">-XX:+IgnoreUnrecognizedVMOptions</span><br><span class="line"><span class="comment">// 启用G1垃圾收集器，能高效回收内存并减少卡顿</span></span><br><span class="line">-XX:+UseG1GC</span><br><span class="line"><span class="comment">// 软引用对象的回收策略1，内存不足时会被优先回收</span></span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=<span class="number">50</span></span><br><span class="line"><span class="comment">// 限制编译器线程数量，避免线程过多导致CPU竞争</span></span><br><span class="line">-XX:CICompilerCount=<span class="number">2</span></span><br><span class="line"><span class="comment">// 当发生内存溢出时，会自动生成堆内存快照(.hprof)，便于事后分析原因</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line"><span class="comment">// 禁用快速抛出异常时省略堆栈跟踪，即使频繁抛出异常(如空指针)也能打印完整堆栈，便于调试</span></span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line"><span class="comment">// 断言机制，验证逻辑正确性</span></span><br><span class="line">-ea</span><br><span class="line"><span class="comment">// 禁用Sun IO包的规范路径缓存，避免某些文件系统环境下的路径缓存导致的文件状态不一致问题</span></span><br><span class="line">-Dsun.io.useCanonCaches=<span class="literal">false</span></span><br><span class="line"><span class="comment">// 允许所有HTTP代理认证方案，解决特定代理环境下的认证失败问题</span></span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// 允许JVM进程自身附加到自己的调试器，支持IDE自身的调试功能(如插件调试)</span></span><br><span class="line">-Djdk.attach.allowAttachSelf=<span class="literal">true</span></span><br><span class="line"><span class="comment">// 对模块间的非法访问(如反射调用)不打印警告日志，减少 JDK 9+ 模块系统带来的冗余警告（某些旧插件可能依赖非法访问）</span></span><br><span class="line">-Djdk.<span class="keyword">module</span>.illegalAccess.silent=<span class="literal">true</span></span><br><span class="line"><span class="comment">// 禁用 Kotlin 协程的调试模式，减少调试信息带来的性能开销（生产环境通常关闭）</span></span><br><span class="line">-Dkotlinx.coroutines.debug=off</span><br><span class="line"><span class="comment">// 指定 JVM 致命错误日志的输出路径（%p 表示进程 ID），记录崩溃等严重错误，便于排查问题</span></span><br><span class="line">-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log</span><br><span class="line"><span class="comment">// 指定内存溢出时堆快照的保存路径，与 HeapDumpOnOutOfMemoryError 配合，生成的快照文件用于分析内存问题</span></span><br><span class="line">-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许未命名模块（如 IDE 自身代码）访问 java.base 模块中的 org.objectweb.asm 内部包，决 JDK 9+ 模块系统的访问限制，确保 IDE 依赖的字节码操作库（ASM）能正常工作</span></span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></table></figure>    修改-Xmx项，将其增大，保存后重启软件生效  </code></pre><ol start="2"><li><p>手动修改配置文件</p><p>​    如果因为内存不足导致软件崩溃，可直接找到配置文件进行修改<br>​    IDEA：安装目录&#x2F;bin&#x2F;idea64.exe.vmoptions</p></li></ol><p><img src="/2025/05/30/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/image-20250817104739135.png" alt="alt text"></p><pre><code>  找到-Xmx项，将其值增大即可。</code></pre><ol start="2"><li><p>减少IDE内存占用</p><ol><li><p>关闭不必要的功能和插件</p></li><li><p>限制同时打开的项目和文件</p></li><li><p>定期清理缓存</p><p>File(文件)–&gt; Invalidate Caches(使缓存失效)</p></li></ol></li></ol><p><img src="/2025/05/30/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/image-20250817160317746.png" alt="alt text"></p><blockquote><p>小知识：</p><p>Clear file system cache and Local History(清除文件系统缓存和本地历史记录)：<br>作用：删除虚拟文件系统缓存以及存储在本地历史中的信息。虚拟文件系统缓存用于加速文件操作，本地历史记录则记录了文件的更改历史。当常规的缓存失效不足以解决问题时，比如遇到文件显示异常或本地历史记录混乱等情况，勾选此选项可能会有帮助。</p><p>​勾选建议：缓存失效不足以解决问题时，能有助于进行故障排除。如果确定不需要本地历史记录，或者本地历史记录已导致问题，可以勾选。否则，建议谨慎选择，因为清除后将无法恢复本地历史记录。</p><p>Clear VCS Log caches and indexes(清除VCS日志缓存和索引)：</p><p>​作用：删除VSC日志的缓存和索引</p><p>​勾选建议：确定VCS日志索引已损坏，例如日志所有无法正常工作，重启此选项</p><p>Mark downloaded shared indexes as excluded(将下载的共享索引标记为已损坏)：</p><p>​作用：清楚下载的共享指数并将其放入排除文件列表中。IDEA将不会重新下载被排除的共享索引。</p><p>​勾选建议：如果遇到与共享索引相关的问题，如代码提示不准确等，可以勾选。</p><p>Ask before downloading new shared indexes(下载新的共享索引前询问)：</p><p>​作用：显示一条通知，提示在新共享索引可用时下载</p><p>​勾选建议：对共享索引的下载有更多控制权，可以勾选</p><p>Delete embedded browser engine cache and cookies(删除嵌入式浏览器引擎缓存和 Cookie)：</p><p>​作用：删除存储在内置JCEF浏览器中的缓存文件和Cookie</p><p>​勾选建议：这些文件很少被破坏。此选项允许您在保持JCEF Cookie和缓存完整的同时使缓存无效。</p><p>Just restart(重启)：</p><p>​作用：不会删除缓存文件，也不会应用所轩的可选操作</p><p>Invalidate and Restart(失效并重启)：</p><p>​作用：如果不勾选上面的选项，只点击Invalidate and Restart，IDEA会清除所有项目的缓存文件，并在重启后重新构建这些缓存。</p></blockquote><ol start="3"><li><p>优化环境</p><ol><li>关闭其他占用内存的程序</li><li>物理层面解决问题，增加内存</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok注解的配置及使用</title>
      <link href="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Lombok注解的配置及使用"><a href="#Lombok注解的配置及使用" class="headerlink" title="Lombok注解的配置及使用"></a>Lombok注解的配置及使用</h1><blockquote><p><em>Lombok是一个Java库，通过注解的方式简化Java代码的编写，减少样板代码(如getter&#x2F;setter、构造方法、toString()等)，提高开发效率。开发者只需关注业务逻辑。</em></p></blockquote><h1 id="1-安装Lombok插件"><a href="#1-安装Lombok插件" class="headerlink" title="1.安装Lombok插件"></a>1.安装Lombok插件</h1><h2 id="1-Eclipse"><a href="#1-Eclipse" class="headerlink" title="1.Eclipse"></a><strong>1.Eclipse</strong></h2><blockquote><p>Eclipse本身是没有Lombok插件，即使项目中引入了Lombok依赖也无法正常使用Lombok注解。此时只能借助Lombok.jar进行引入。</p></blockquote><h3 id="1-1下载Lombok-jar包"><a href="#1-1下载Lombok-jar包" class="headerlink" title="1.1下载Lombok.jar包"></a><strong>1.1下载Lombok.jar包</strong></h3><p><a href="https://projectlombok.org/download">Lombok.jar下载</a></p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802152414664.png" alt="alt text"></p><h3 id="1-2安装jar包"><a href="#1-2安装jar包" class="headerlink" title="1.2安装jar包"></a><strong>1.2安装jar包</strong></h3><p>在lombok.jar所在的文件下运行cmd(尽量确保路径没有中文，防止出错)</p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802165359872.png" alt="alt text"></p><p>执行java命令运行jar文件(系统必须安装了JRE环境才可执行java命令)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar lombok.jar</span><br></pre></td></tr></table></figure><p>会打开如图所示的lombok插件窗口</p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802165802088.png" alt="alt text"></p><p>发现提示我们并未找到我们所安装的Eclipse，如果你已安装了Eclipse，点击Specify Location按钮去选择所安装的Eclipse的路径</p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802170358925.png" alt="alt text"></p><p>选择完Eclipse路径后，点击Install&#x2F;Update按钮进行安装或者升级。</p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802170437554.png" alt="alt text"></p><p>完成安装后，关闭窗口，重启Eclipse</p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802170646847.png" alt="alt text"></p><h3 id="1-3-使用Lombok插件"><a href="#1-3-使用Lombok插件" class="headerlink" title="1.3 使用Lombok插件"></a><strong>1.3 使用Lombok插件</strong></h3><p>导入相关的Lombok依赖，即可在Eclipse中使用Lombok注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok所属的项目组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok的库名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标记该依赖为&quot;可选&quot;，如果项目是多模块的项目，可避免依赖会传递到所有下游模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-IDEA"><a href="#2-IDEA" class="headerlink" title="2.IDEA"></a><strong>2.IDEA</strong></h2><h3 id="2-1-安装Lombok插件"><a href="#2-1-安装Lombok插件" class="headerlink" title="2.1 安装Lombok插件"></a><strong>2.1 安装Lombok插件</strong></h3><p>菜单栏File(文件)-&gt;Setting(设置)-&gt;Plugins(插件)-&gt;Marketplace-&gt;lombok</p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802174751813.png" alt="alt text"></p><h3 id="2-2-配置注释解释器"><a href="#2-2-配置注释解释器" class="headerlink" title="2.2 配置注释解释器"></a><strong>2.2 配置注释解释器</strong></h3><p>菜单栏File(文件)-&gt;Setting(设置)-&gt;Plugins(插件)-&gt;Build,Execution,Deployment(构建、执行、部署)-&gt;Compiler(编译器)-&gt;Annotation Processors(注释处理器)，勾选Enable annotation processing(启用注解处理)</p><p><img src="/2025/08/02/Lombok%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20250802175610586.png" alt="alt text"></p><h3 id="2-3-使用Lombok插件"><a href="#2-3-使用Lombok插件" class="headerlink" title="2.3 使用Lombok插件"></a><strong>2.3 使用Lombok插件</strong></h3><p>在pom.xml中加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-Lombok注解"><a href="#2-Lombok注解" class="headerlink" title="2.Lombok注解"></a>2.Lombok注解</h1><h2 id="1-类结构相关注解"><a href="#1-类结构相关注解" class="headerlink" title="1.类结构相关注解"></a><strong>1.类结构相关注解</strong></h2><p>@Data：自动生成Getter、Setter、toString()、equals()、hashCode()、RequiredArgsConstructor方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统Java写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">// final字段需构造方法初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    privaye <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动编写构造方法(因为name是final)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动生成getter、setter</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetScore</span><span class="params">(<span class="type">double</span> score)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动生成toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student(name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, score = &quot;</span> + score + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动生成equals()和hasCode()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(o == <span class="literal">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)o;</span><br><span class="line">        <span class="keyword">return</span> age == student.age &amp;&amp; Double.compare(student.score,score) == <span class="number">0</span> &amp;&amp; name.equals(student.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name,age,score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用Lombok的@Data注解</span></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">   <span class="keyword">private</span> fianl String na、me;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>@Getter：仅生成Getter方法<br>@Setter：仅生成Setter方法(非final字段)<br>@ToString：生成toString()方法<br>@EqualsAndHashCode：生成equals()和hashCode()方法<br>@Value：生成不可变类(所有字段为final，只生成Getter，不生成Setter)</p><h2 id="2-构造方法相关注解"><a href="#2-构造方法相关注解" class="headerlink" title="2.构造方法相关注解"></a><strong>2.构造方法相关注解</strong></h2><p>@NoArgsConstructor：生成一个无参构造方法<br>@AllArgsConstructor：生成全参构造方法<br>@RequiredArgsConstructor:生成必填字段构造方法(final字段或@NonNull注解的字段)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统JAVA写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,String age)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用Lombok注解</span></span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-其他注解"><a href="#3-其他注解" class="headerlink" title="3.其他注解"></a><strong>3.其他注解</strong></h2><p>@Builder：生成建造者模式的链式调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统Java写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">age</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">email</span><span class="params">(String email)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.email = email;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> User <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, age, email);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用Lombok注解</span></span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>@Slf4j：自动生成日志对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统Java写法</span></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(UserService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Processing user...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用Lombok注解</span></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Processing user...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SneakyThrows：自动抛出受检异常(无需显示try-catch或throws)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统Java写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Files.readAllBytes(Paths.get(<span class="string">&quot;file.txt&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用Lombok注解</span></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span>&#123;</span><br><span class="line">    Files.readAllBytes(Paths.get(<span class="string">&quot;file.txt&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Cleanup：自动调用资源的close()方法(如IO流)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统Java写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        input = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 处理输入流</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用Lombok注解</span></span><br><span class="line"><span class="keyword">import</span> lombok.Cleanup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="meta">@Cleanup</span> <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 处理输入流，无需手动关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@NonNull：标记字段或参数不能为null，生成空值检查代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统Java写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用Lombok注解</span></span><br><span class="line"><span class="keyword">import</span> lombok.NonNUll</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">setName</span><span class="params">(<span class="meta">@NonNUll</span> String name)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-组合注解"><a href="#4-组合注解" class="headerlink" title="4.组合注解"></a><strong>4.组合注解</strong></h2><p>@Date &#x3D; @Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor<br>@Value &#x3D; @Getter + @ToString + @EqualsAndHashCode + AllArgsConstructor</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于IDEA和PyCharm同时安装，用同一种方法破解后导致其中一个无法使用或无法破解的解决办法</title>
      <link href="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="关于IDEA和PyCharm同时安装，用同一种方法破解后导致其中一个无法使用或无法破解的解决办法"><a href="#关于IDEA和PyCharm同时安装，用同一种方法破解后导致其中一个无法使用或无法破解的解决办法" class="headerlink" title="关于IDEA和PyCharm同时安装，用同一种方法破解后导致其中一个无法使用或无法破解的解决办法"></a>关于IDEA和PyCharm同时安装，用同一种方法破解后导致其中一个无法使用或无法破解的解决办法</h1><blockquote><p><em>同时使用JetBrains公司旗下的多个编程工具，在使用同一种方法破解完成后，其中一个软件可能会出现无法使用(无法打开软件)或已经破解但重启后仍显示没有破解的情况</em></p></blockquote><blockquote><p>因为使用的都是jetbra进行破解，而破解工具中会包含所有JetBrains公司旗下的所有编程工具的破解文件!<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713184731569.png" alt="alt text"></p></blockquote><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><blockquote><p>查看自己的环境变量，其中会有很多以_VM_OPTIONS结尾的变量名，这是在破解工具执行破解文件时自动添加到环境变量中的，也是因为他导致出现无法破解或破解后无法打开软件的原因。<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="alt text"><br>将所有的以_VM_OPTIONS结尾的变量名全部删除，此时无法打开的软件已经可以正常打开</p><p>此时需要重新对软件进行破解，在破解工具的目录中，将vmoptions文件夹进行备份(我的vmoptions备份改成了破解文件)<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713190031947.png" alt="alt text"><br>在vmoptions备份之后，将vmoptions中的文件只留下一个破解文件，其他文件全部删除(我这里以IDEA的破解文件为例)<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713190350420.png" alt="alt text"><br>在scripts文件中，首先运行uninstall-all-users.vbs(确保所有的破解记录全部删除了)，然后运行install-current-user(重新激活)，因为破解文件夹中只有IDEA的破解文件，所以你的环境变量中只有IDEA_VM_OPTIONS，如果出现了其他以VM_OPTIONS为结尾的变量名，则证明你前面的步骤出现了问题。!<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713191303055.png" alt="alt text"><br>然后打开IDEA软件，因为我这里之前已经破解过，运行软件后直接打开软件跟刚安装完软件不一样，点击左下角的齿轮，然后选择Manage Licenses<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713191950253.png" alt="alt text"><br>选择Activation code后粘贴破解工具中Activation_Code文件夹下的IDEA激活码，点击active即刻完成IDEA的激活<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713192326724.png" alt="alt text"><br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713192342257.png" alt="alt text"><br>回到破解工具中的vmoptions文件夹下，将刚才的IDEA破解文件删除，将PyCharm的破解文件复制进来，然后再次进行激活，但此时需要注意不需要执行uninstall-all-users.vbs，如果还进行执行，会将已经配置好的IDEA进行删除，只需要执行install-current-user即可，然后按照上述的执行步骤进行破解，当PyCharm工具激活完毕后，需要将IDEA的破解文件重新复制一份放入vmoptions文件下，否则添加到环境变量中无法找到你对应的破解文件，会导致软件破解完成了但是软件无法打开运行。<br><img src="/2025/07/13/%E5%85%B3%E4%BA%8EIDEA%E5%92%8CPyCharm%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E7%94%A8%E5%90%8C%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E7%A0%B4%E8%A7%A3%E5%90%8E%E5%AF%BC%E8%87%B4%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%88%96%E6%97%A0%E6%B3%95%E7%A0%B4%E8%A7%A3%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/image-20250713193332459.png" alt="alt text"><br>经过上述方案后解决了只能破解一个软件或破解软件后无法打开的问题。JetBrains公司旗下的其他软件步骤与上述方法相同。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 软件激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/30/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
      <url>/2025/05/30/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>常用的一些注解</p><p>@SpringBootApplication</p><p>@RestController包含了@Controller和@ResponseBody</p><p>@Controller：负责处理HTTP请求并返回响应</p><p>@ResponseBodt：将返回的数据结构转换为Json格式</p><p>spring-boot-starter-json是Spring Boot默认提供依赖</p><p>spring-boot-starter-json包含在spring-boot-starter-web，spring-boot-starter-web继承自spring-boot-starter-parent</p><p>spring-boot-starter-parent：提供默认依赖管理和插件配置</p><p>spring-boot-starter-web：包含了</p><ul><li><code>spring-boot-starter-json</code>（提供 Jackson 库，处理 JSON）</li><li><code>spring-boot-starter-tomcat</code>（内嵌 Tomcat）</li><li><code>spring-web</code> 和 <code>spring-webmvc</code>（Spring MVC 核心）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora的安装与激活</title>
      <link href="/2025/05/22/Typora%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/"/>
      <url>/2025/05/22/Typora%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora的安装与激活"><a href="#Typora的安装与激活" class="headerlink" title="Typora的安装与激活"></a>Typora的安装与激活</h1><blockquote><p><em>因为搭建自己的博客等一些原因需要编写markdown，但我自己以前的typora激活过的不好用了，只能上网找师傅们提供的方法，以下是我尝试都好用的，当然方法不唯一。</em></p></blockquote><h2 id="1-前期准备工作"><a href="#1-前期准备工作" class="headerlink" title="1.前期准备工作"></a>1.前期准备工作</h2><h3 id="1-1-Typora工具的下载"><a href="#1-1-Typora工具的下载" class="headerlink" title="1.1 Typora工具的下载"></a>1.1 Typora工具的下载</h3><blockquote><p>Typora官网网址：<a href="https://typora.io/">https://typora.io/</a><br>Typora中文官网网址：<a href="https://typoraio.cn/">https://typoraio.cn/</a></p></blockquote><h3 id="1-2-Typora激活工具的下载"><a href="#1-2-Typora激活工具的下载" class="headerlink" title="1.2 Typora激活工具的下载"></a>1.2 Typora激活工具的下载</h3><blockquote><ol><li><p>新版激活工具</p><p><a href="https://pan.baidu.com/s/1YrzTh84-WFmSGlYktmUULA?pwd=xg9e">激活工具</a></p></li><li><p>旧版激活工具（参考自渊龙Sec安全团队）</p><p><a href="https://pan.baidu.com/s/1DwUsi2flXxcklLCJPWOj5Q?pwd=cdrh">激活工具</a></p></li></ol></blockquote><h2 id="2-Typora安装"><a href="#2-Typora安装" class="headerlink" title="2.Typora安装"></a>2.Typora安装</h2><blockquote><p>直接傻瓜式的下一步就好，注意修改目录到自己想要的位置。</p><p>如果你使用旧版激活方法，安装旧版激活工具中提供的软件安装包</p></blockquote><h2 id="3-Typora的激活"><a href="#3-Typora的激活" class="headerlink" title="3.Typora的激活"></a>3.Typora的激活</h2><h3 id="3-1-新版激活方法"><a href="#3-1-新版激活方法" class="headerlink" title="3.1 新版激活方法"></a>3.1 新版激活方法</h3><blockquote><ol><li><p>将激活工具解压到Typora的根目录下</p></li><li><p>在Typora的安装目录中运行cmd</p></li><li><p>使用ls命令查看激活工具是否已经解压到目录下</p></li><li><p>运行node_inject.exe命令，时间会有些长，直至出现done！即可完成</p><p><img src="/2025/05/22/Typora%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/1.png" alt="执行node-inject命令"></p></li><li><p>运行license-gen.exe命令，就会得到激活码</p><p><img src="/2025/05/22/Typora%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/2.png" alt="执行node-inject命令"></p></li><li><p>不关闭上面页面，运行软件Typora，并填写相应的激活信息</p><p><img src="/2025/05/22/Typora%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/3.png" alt="填写激活信息"></p></li><li><p>完成激活，激活之后一定不要点更新，如果更新了软件，激活则会失效，需要卸载软件后重新安装激活，有时会出现无法激活的问题，可以使用旧版激活方法。</p><p><img src="/2025/05/22/Typora%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/4.png" alt="完成"></p></li></ol></blockquote><h3 id="3-2-旧版激活方法"><a href="#3-2-旧版激活方法" class="headerlink" title="3.2 旧版激活方法"></a>3.2 旧版激活方法</h3><blockquote><ol><li>下载并安装旧版激活工具中的Typora软件</li><li>完成安装后，将激活工具中的app.asar复制到软件安装目录下的resources文件夹中并替换掉原有的文件</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
            <tag> 软件激活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/test.html"/>
      <url>/test.html</url>
      
        <content type="html"><![CDATA[<h1>Hello Pug!</h1><p>This is a test.</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/test.css"/>
      <url>/css/test.css</url>
      
        <content type="html"><![CDATA[body {  color: #333;}]]></content>
      
    </entry>
    
    
  
</search>
